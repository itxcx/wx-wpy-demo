<style lang="less">
  .reviewWork {
    height: 100%;
    background: #efeff4;
    .scroll-view-item_H {
      display: inline-block;
      width: 100%;
      height: 1206rpx;
      .nav {
        background-color: #fff;
        padding: 0 30rpx;
        border-bottom: 1px solid #e5e5e5;
        height: 95rpx;
        line-height: 95rpx;
        .prev,
        .next {
          font-size: 28rpx;
          color: #000;
        }
        .progress {
          text-align: center;
          color: #888;
          font-size: 20px;
          .current {
            color: #0052cc;
            display: inline;
          }
        }
      }
      .display_container {
        margin-top: 30rpx;
        margin-bottom: 80rpx;
        border-top: 1px solid #e5e5e5;
        border-bottom: 1px solid #e5e5e5;
        .content_container {
          background-color: #fff;
          border-bottom: 1px solid #e5e5e5;
          margin-bottom: 30rpx;
          &.answers_container {
            flex-direction: column;
            img {
              display: block;
              overflow: visible;
            }
          }
          .container_label {
            font-size: 28rpx;
            color: #888;
            padding: 38rpx 0 22rpx 30rpx;
          }
          .empty_answer_tip {
            text-align: center;
            font-size: 28rpx;
            border-top: 1px solid #e5e5e5;
            padding: 30rpx;
          }
          .detail_container {
            border-top: 1px solid #e5e5e5;
            padding: 0 30rpx;
          }
        }
      }
      .marking_container {
        position: fixed;
        bottom: 0rpx;
        width: 100%;
        height: 98rpx;
        line-height: 98rpx;
        background-color: #eee;
        text-align: center;
        vertical-align: middle;
        padding-top: 34rpx;
      }
    }
  }
  .wxParse-img {
    width: 690rpx;
  }
  image {
    display: block;
    overflow: visible;
    padding: 40rpx 0rpx;
  }
  .question {
    padding: 36rpx 30rpx 40rpx 30rpx;
  }
  button[size="mini"] {
    display: inline-block;
    line-height: 2.3;
    font-size: 13px;
    padding: 0;
    width: 108rpx;
  }
  .voice-block {
    margin-left: 10px;
    width: 300rpx;
    height: 70rpx;
    margin-top: 10px;
  }
  .container_label_speech {
    background: #efeff4;
  }
  .upload-again {
    height: 70rpx !important;
    line-height: 70rpx !important;
    margin-top: 8px !important;
  }
  .weui-cell-delect-plus{
    width: 54rpx;
    height: 54rpx;
    display: inline-block;
    margin-top:12px;
  }
  .weui-cell-delect{
    width: 100%;
    height: 100%;
    display: block;
    padding:0px;
  }
</style>

<template>
  <import src="../../components/question/question.wxml" />
  <view class="reviewWork">
    <view class="scroll-view-item_H">
      <view class="weui-flex nav">
        <view class="prev" @tap="preWork">{{prevButtonName}}</view>
        <view class="weui-flex__item progress">
          <view class="current">{{question.counter+1}}</view>/{{parsedQuestionList.length}}
        </view>
        <view class="next" @tap="nextWork">{{nextButtonName}}</view>
      </view>
      <view bindtouchmove="touchmove" bindtouchstart="touchstart" bindtouchend="touchend" class="display_container">
        <view class="weui-flex content_container">
          <template is="question" data="{{question: question.questions, display: 'simple'}}">
</template>
        </view>
        <view class="flex-wrp content_container answers_container">
          <view class="container_label">作答详情</view>
          <block wx:if="{{jsonAnswer.length > 0 }}">
            <block wx:for-items="{{jsonAnswer}}" wx:for-index="aindex" wx:for-item="aitem" wx:key="*this">
              <view class="flex-item flex-item-V detail_container">
                <navigator url="../canvas/canvas?pad={{pad}}&image={{aitem}}&jsonAnswer={{jsonAnswerStr}}" hover-class="navigator-hover">
                  <image class="image" src="{{aitem}}" />
                </navigator>
              </view>
            </block>
          </block>
          <block wx:else>
            <view class="empty_answer_tip">本题未作答</view>
          </block>
        </view>
        <block wx:if="{{jsonAudioComment.length > 0 }}">
          <view class="flex-wrp content_container">
            <view class="container_label container_label_speech">语音批语</view>
            <block wx:for-items="{{jsonAudioComment}}" wx:for-index="index" wx:for-item="item" wx:key="*this">
              <view class="weui-flex detail_container">
              <block wx:if="{{!!item.isTmpFile}}">
                <view style="text-align:center;">
                      <button bindtap="reupAudio" data-index="{{index}}" data-item="{{item}}" class="weui-btn mini-btn upload-again" type="default" size="mini">重新上传</button>
                </view>
                </block>
                <view class="weui-flex__item">
                  <view class="placeholder voice-block">
                    <view class="weui-cell-play-plus" data-index="{{index}}" data-src="{{item.url}}" bindtap="playVoice">
                      <image class="weui-cell-play" src="/images/play.png" style="width:54rpx;height:60rpx;display:block;padding:0px;"></image>
                    </view>
                  </view>                
                </view>
                <view>
                  <view class="placeholder">
                    <view bindtap="delAudio" data-index="{{index}}" data-url="{{item.url}}" class="weui-cell-delect-plus" type="default" size="mini">
                      <image class="weui-cell-delect" src="/images/del.png" mode="scaleToFill"></image>
                    </view>
                  </view>
                </view>
              </view>
            </block>
          </view>
        </block>
      </view>
      <view class="weui-flex marking_container">
        <view>
          <Voice :jsonAudioComment.sync="jsonAudioComment"></Voice>
        </view>
        <marking :question.sync="question"></marking>
      </view>
    </view>
  </view>
  <toast />
  <CofirmAction :cofirmhidden.sync="cofirmhidden" :actionTitle.sync="actionTitle" />
  <audio  src="{{audioUrl}}" id="myAudio" ></audio>
</template>

<script>
  import wepy from 'wepy'
  import DetailWork from './detailWork'
  import toast from 'wepy-com-toast'
  import Voice from './voice'
  import API from '../../util/api.js'
  import Question from '../../components/question/question.js'
  import CofirmAction from '../../components/confirmAction/confirmAction'
  import Marking from './marking/marking'
  export default class ReviewWork extends wepy.page {
    config = {
      navigationBarTitleText: '批改作业'
    }
    components = {
      DetailWork: DetailWork,
      CofirmAction: CofirmAction,
      toast: toast,
      Voice: Voice,
      marking: Marking
    }
    mixins = []
    data = {
      stem: {},
      cacthIndex: 999,
      audioUrl: '',
      unCheckedUsers: [],
      userList: [],
      user: {
        isFirst: false,
        isLast: false,
        realname: ''
      },
      questionList: [],
      parsedQuestionList: [],
      question: {
        isFirst: false,
        isLast: false,
        questions: {
          pad: {
            teachercheck: {}
          }
        }
      },
      prevButtonName: '',
      nextButtonName: '',
      cofirmhidden: false,
      actionTitle: '是否删除该条语音',
      tempFilePath: '',
      scrollTop: 0,
      initpageX: 0,
      initPageY: 0,
      endpageX: 0,
      endpageY: 0,
      jsonAnswer: [],
      jsonAnswerStr: '',
      pad: {},
      jsonAudioComment: [],
      audioAction: {
        method: 'pause'
      }
    }
    computed = {
      prevButtonName() {
        if (this.question.isFirst) {
          console.log(this.question.isFirst, this.user.isFirst)
          if (this.user.isFirst) {
            return ''
          } else {
            return '上一同学'
          }
        } else {
          return '上一题'
        }
      },
      nextButtonName() {
        console.log('nextButtonName,user.isLast=', this.user.isLast)
        if (this.question.isLast) {
          if (this.user.isLast) {
            return '完成'
          } else {
            return '下一同学'
          }
        } else {
          return '下一题'
        }
      }
    }
    methods = {
      playVoice(e) {
        // console.log('playVoice..e..',e)
        const src = e.currentTarget.dataset.src
        const index = e.currentTarget.dataset.index
        // console.log('playVoice..src..', e, index, src)
        if (this.cacthIndex === index) {
          if (!this.playing) {
            this.audioPlay(src)
          } else {
            this.audioPause()
          }
        } else {
          this.audioPause()
          this.audioPlay(src)
        }
        this.cacthIndex = index
      },
      wxParseImgLoad(e) {
        // const that = this
        const recal = Question.wxAutoImageCal(e.detail.width, e.detail.height, this, 'image')
        // const idx = e.target.dataset.idx
        this.parsedQuestionList.forEach(function(question, qIndex) {
          Question.resizeContentImage(e.target.dataset.from, question.questions, e.target.dataset.src, recal.imageWidth, recal.imageheight)
        })
      },
      reupAudio(e) {
        // 重新上传
        const that = this
        const id = e.target.dataset.index
        const item = e.target.dataset.item
        console.log('reupAudio,item=', item)
        this.addAudio({
          fileUrl: item.url,
          len: item.length
        }, function(res) {
          console.log('reupAudio=', res)
          let data = JSON.parse(res.data)
          if (data.status.code === 0) {
            that.jsonAudioComment.splice(id, 1, data.data[0])
            // that.jsonAudioComment.push(data.data[0])
            // console.log("jsonAudioComment=", that.jsonAudioComment, data[0])
            that.mergePad({
              jsonAudioComment: that.jsonAudioComment
            })
            wx.showToast({
              title: '语音发送成功',
              icon: 'success',
              duration: 3000
            })
          } else {
            that.$invoke('toast', 'show', {
              title: data.status.desc
            })
            // that.jsonAudioComment.push({
            //   length: item.length,
            //   url: item.url,
            //   isTmpFile: true
            // })
            // // console.log("jsonAudioComment=", that.jsonAudioComment, data[0])
            // that.mergePad({
            //   jsonAudioComment: that.jsonAudioComment
            // })
          }
          that.$apply()
        })
      },
      delAudio(e) {
        // 删除语音
        const that = this
        const id = e.target.dataset.index
        const url = e.target.dataset.url
        // console.log('delAudio=', id, url, that.jsonAudioComment)
        this.cofirmhidden = true
        CofirmAction.initAction({
          confirm() {
            // console.log('confirm...')
            const param = {
              url: API.HOST_URI + API.delAudioComment,
              data: Object.assign({
                padId: that.getCurrentQuestions().pad.id,
                uid: that.user.id,
                url: url
              }, wepy.getStorageSync('xcx_yixueyilian_privacy')),
              method: 'POST', // OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT
              header: {
                'content-type': 'application/x-www-form-urlencoded'
              }, // 设置请求的 header
              success: function(res) {
                // console.log('delAudio=', res, Object.assign({
                //   padId: that.getCurrentQuestions().pad.id,
                //   uid: that.user.id,
                //   url: url
                // }, wepy.getStorageSync('xcx_yixueyilian_privacy')))
                API.validateLogIn(res.data.status.code, function() {
                  wx.showToast({
                    title: '语音删除成功',
                    icon: 'success',
                    duration: 3000
                  })
                  that.jsonAudioComment.splice(id, 1)
                  that.cofirmhidden = false
                }, function(code) {
                  that.$invoke('toast', 'show', {
                    title: res.data.status.desc
                  })
                })
              },
              fail: function(res) {
                // fail
                // console.log('fail...res=', res)
                const desc = (res.data && res.data.status.desc) || '删除失败'
                that.$invoke('toast', 'show', {
                  title: desc
                })
              },
              complete: function() {
                // complete
                that.cofirmhidden = false
                that.$apply()
              }
            }
            wx.request(param)
          },
          cancel() {
            // console.log('cancel...')
            that.cofirmhidden = false
            that.$apply()
          }
        })
      },
      touchstart(e) {
        // 左右滑动翻页
        // let touchs = e.touches[0]
        // let pageX = touchs.pageX
        // this.initpageX = pageX
      },
      touchend(e) {
        // 左右滑动翻页
        // if (this.endpageX === 0) {
        //   return
        // }
        // if (this.endpageX < this.initpageX - 10) {
        //   // 下一页
        //   this.methods.nextWork.bind(this)(e)
        // } else if (this.endpageX > this.initpageX + 10) {
        //   // 上一页
        //   this.methods.preWork.bind(this)(e)
        // }
      },
      touchmove(e) {
        // 左右滑动翻页
        // let touchs = e.touches[0]
        // let pageX = touchs.pageX
        // this.endpageX = pageX
      },
      preWork(e) {
        if (this.prevButtonName === '上一题') {
          const qIndex = this.question.counter
          this.question = this.parsedQuestionList[qIndex - 1]
          const pad = this.getCurrentQuestions().pad
          this.jsonAudioComment = pad.jsonAudioComment || []
          this.$apply()
          console.log('that.jsonAudioComment=', pad.jsonAudioComment)
        } else if (this.prevButtonName === '上一同学') {
          const uIndex = this.user.counter
          this.user = this.userList[uIndex - 1]
          const that = this
          // console.log('preWork,this.user =', this.user, this.userList)
          wepy.setNavigationBarTitle({
            title: this.user.realname,
            success() {
              that.getQuestionList()
            }
          })
        }
      },
      nextWork(e) {
        let pad = this.getCurrentQuestions().pad
        if (pad && pad.status === 5) {
          const qIndex = this.question.counter
          this.parsedQuestionList[qIndex] = this.question
          if (this.nextButtonName === '下一题') {
            const qIndex = this.question.counter
            this.question = this.parsedQuestionList[qIndex + 1]
            pad = this.getCurrentQuestions().pad
            this.jsonAudioComment = pad.jsonAudioComment || []
            this.$apply()
            console.log('that.jsonAudioComment=', pad.jsonAudioComment)
          } else if (this.nextButtonName === '下一同学') {
            const uIndex = this.user.counter
            this.user = this.userList[uIndex + 1]
            console.log('that.jsonAudioComment=', pad.jsonAudioComment)
            // console.log('preWork,this.user =', this.user, this.userList, uIndex)
            let that = this
            wepy.setNavigationBarTitle({
              title: this.user.realname,
              success() {
                that.$invoke('toast', 'show', {
                  title: '开始批改下一个同学'
                })
                that.getQuestionList()
              }
            })
          } else {
            this.$invoke('toast', 'show', {
              title: '已完成本次批改'
            }).then((res) => {
              wepy.switchTab({
                url: '../checkWork/checkWork'
              })
            })
          }
        } else {
          this.$invoke('toast', 'show', {
            title: '请先完成本题批改'
          })
        }
      },
      scroll: function(e) {
        // console.log("scroll", e)
      },
      upper(e) {
        // 顶部/左边
        // console.log('upper', e)
      },
      lower(e) {
        // 底部/右边
        // console.log('lower', e)
      }
    }
    addAudio(audioObj, callback) {
      const that = this
      const params = {
        url: API.HOST_URI + API.addAudioComment, // 仅为示例，非真实的接口地址
        filePath: audioObj.fileUrl,
        name: 'file',
        formData: Object.assign({
          padId: that.getCurrentQuestions().pad.id,
          uid: that.user.id,
          length: audioObj.len
        }, wepy.getStorageSync('xcx_yixueyilian_privacy')),
        success: function(res) {
          callback(res)
        },
        fail(res) {
          // console.log('fail', res)
          wx.showToast({
            title: '上传语音失败',
            icon: 'fail',
            image: '',
            duration: 3000
          })
        }
      }
      wx.uploadFile(params)
    }
    events = {
      'voice-broadcast': (...args) => {
        // 添加语音
        // console.log('voice-broadcast=', args)
        const that = this
        let vfileUrl = args[0].url || ''
        let vlen = args[0].length || 0
        that.addAudio({
          fileUrl: vfileUrl,
          len: vlen
        }, function(res) {
          console.log('voice-broadcast', res)
          let data = JSON.parse(res.data)
          if (data.status.code === 0) {
            that.jsonAudioComment.push(data.data[0])
            // console.log("jsonAudioComment=", that.jsonAudioComment, data[0])
            that.mergePad({
              jsonAudioComment: that.jsonAudioComment
            })
            wx.showToast({
              title: '语音发送成功',
              icon: 'success',
              duration: 3000
            })
          } else {
            that.$invoke('toast', 'show', {
              title: data.status.desc
            })
            that.jsonAudioComment.push({
              length: vlen,
              url: vfileUrl,
              isTmpFile: true
            })
            // console.log("jsonAudioComment=", that.jsonAudioComment, data[0])
            that.mergePad({
              jsonAudioComment: that.jsonAudioComment
            })
          }
          that.$apply()
        })
      },
      'marking': (...args) => {
        console.log('marking=', args)
        const that = this
        let params = {}
        let question = {}
        const questions = this.getCurrentQuestions()
        const pad = questions.pad
        const teacherCheck = pad.teachercheck
        let teacherCheckId = -1
        // console.log('marking，teacherCheck=', teacherCheck)
        if (teacherCheck) {
          teacherCheckId = teacherCheck.id
        }
        if (question.parentPadid) {
          params.parentPadid = questions.parentPadid
        }
        params.pid = questions.pid
        params.qid = questions.id
        params.id = teacherCheckId
        params.padid = pad.id
        params.score = args[0].value
        wepy.request({
          url: API.HOST_URI + API.submitSubjectiveCheck,
          data: Object.assign({
            checkJson: JSON.stringify(params)
          }, wepy.getStorageSync('xcx_yixueyilian_privacy')),
          success(res) {
            // console.log('marking，success=', res)
            API.validateLogIn(res.data.status.code, function() {
              const data = res.data.property.id
              that.mergePad({
                teachercheck: {
                  id: data.id,
                  score: data.score
                },
                status: data.status
              })
              // console.log('marking,that.question.isLast=', that.question.isLast)
              if (that.question.isLast) {
                wepy.request({
                  url: API.HOST_URI + API.finishSubjectiveCheck,
                  data: Object.assign({
                    uid: that.user.id,
                    paperId: that.paperId,
                    AllObjective: 0
                  }, wepy.getStorageSync('xcx_yixueyilian_privacy')),
                  success(res) {
                    API.validateLogIn(res.data.status.code, function() {}, function(code) {
                      that.$invoke('toast', 'show', {
                        title: res.data.status.desc
                      })
                    })
                  }
                })
              }
            }, function(code) {
              that.$invoke('toast', 'show', {
                title: res.data.status.desc
              })
            })
            that.$apply()
          }
        })
      }
    }
    initAudioPlayer() {
      // url = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&fromtag=46'
      this.audioCtx = wx.createAudioContext('myAudio')
      this.playing = false
      // this.audioCtx.setSrc(url)
      // this.audioCtx.play()
    }
    audioPlay(url) {
      this.audioCtx.setSrc(url)
      this.audioCtx.play()
      this.playing = true
    }
    audioSeek(vlen) {
      const len = vlen || 0
      this.audioCtx.seek(len)
      this.playing = false
    }
    audioPause() {
      this.audioCtx.pause()
      this.playing = false
    }
    onShow() {
      let that = this
      this.initAudioPlayer()
      that.$invoke('toast', 'hide', {}).then((d) => {
        // console.log('toast cancel done')
      })
      wepy.request({
        url: API.HOST_URI + API.getCheckIndex,
        data: Object.assign({
          paperId: this.paperId,
          groupIds: this.groupIds,
          currentGroupId: this.currentGroupId,
          qtype: 1
        }, wepy.getStorageSync('xcx_yixueyilian_privacy')),
        success(res) {
          API.validateLogIn(res.data.status.code, function() {
            const data = res.data.data[0]
            that.questionList = data.answerInfo
            that.unCheckedUserId = data.unCheckedUid
            that.unCheckedQuestionId = data.unCheckedQid
            that.userList = that.getUserList(data.groupInfo)
            that.user = that.getUserById()
            console.log('that.user=', that.user)
            wepy.setNavigationBarTitle({
              title: that.user.realname
            })
            that.parsedQuestionList = that.getParsedQuestionList()
            that.question = that.getQuestionById()
            const questions = that.getCurrentQuestions()
            that.jsonAnswer = questions.pad.jsonAnswer || []
            that.jsonAnswerStr = JSON.stringify(questions.pad.jsonAnswer)
            that.pad = JSON.stringify(questions.pad)
            that.jsonAudioComment = questions.pad.jsonAudioComment || []
            // that.jsonAudioComment.forEach(function(elem) {
            //   elem.isTmpFile = false
            // })
          }, function(code) {
            that.$invoke('toast', 'show', {
              title: res.data.status.desc
            })
          })
          that.$apply()
        }
      })
    }
    getVoiceAuth() {
      const that = this
      wx.getSetting({
        success(res) {
          if (!res['scope.record']) {
            wx.authorize({
              scope: 'scope.record',
              success() {
                // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问
                // wx.showToast({
                //   title: '语音授权成功',
                //   icon: 'success',
                //   duration: 3000
                // })
              },
              fail() {
                // wx.showToast({
                //   title: '您拒绝了授权',
                //   icon: 'fail',
                //   duration: 3000
                // })
                wx.showModal({
                  title: '提示',
                  content: '您拒绝了授权，将无法使用语音,请重新设置',
                  showCancel: false,
                  success: function(res) {
                    if (res.confirm) {
                      console.log('用户点击确定')
                      wx.openSetting({
                        success: (res) => {
                          res.authSetting = {
                            'scope.record': true
                          }
                          that.onShow()
                        }
                      })
                    } else if (res.cancel) {
                      console.log('用户点击取消')
                    }
                  }
                })
              }
            })
          }
        }
      })
    }
    onLoad(options) {
      this.paperId = options.paperId
      this.groupIds = options.groupIds
      this.currentGroupId = options.currentGroupId
      this.getVoiceAuth()
      // wx.playVoice({
      //   filePath: 'http://scc.jsyxw.cn/audio/2017/0704/file_595b6bbce93d6.mp3',
      //   success: function() {
      //     console.log('play voice finished')
      //   }
      // })
      // wx.downloadFile({
      //   url: 'https://www.yixueyilian.com/1.mp3',
      //   success: function(res) {
      //     console.log('rres.tempFilePath==', res.tempFilePath)
      //     // wx.playVoice({
      //     //   filePath: res.tempFilePath
      //     // })
      //     wx.playVoice({
      //       filePath: res.tempFilePath,
      //       success(res) {
      //         console.log('playVoice,成功=', res)
      //       },
      //       fail() {
      //         console.log('playVoice..fail=')
      //       }
      //     })
      //   },
      //   fail() {
      //     console.log('播放失败fail')
      //   }
      // })
      // console.log(WxParse)
      // WxParse('article', 'html', '<div></div>', this, 5)
    }
    onUnLoad() {
      // console.log('onUnLoad...')
    }
    getUserList(groupInfo) {
      let userList = []
      groupInfo.forEach(function(group, gIndex) {
        let users = group.pas
        users.forEach(function(user, uIndex) {
          let isFirst = false
          let isLast = false
          console.log('isLast==', uIndex + 1 === users.length)
          if (uIndex === 0) {
            isFirst = true
          } else if (uIndex + 1 === users.length) {
            isLast = true
          }
          userList.push(Object.assign(user.user, {
            counter: uIndex,
            isFirst: isFirst,
            isLast: isLast
          }))
        })
      })
      return userList
    }
    getParsedQuestionList() {
      const that = this
      const questionAmount = this.questionList.length
      this.questionList.forEach(function(question, qIndex) {
        question.counter = qIndex
        if (qIndex === 0) {
          question.isFirst = true
        }
        if (qIndex + 1 === questionAmount) {
          question.isLast = true
        }
        question.questions.index = question.index || ''
        if (question.questions.template === 'multi' || question.questions.template === 'cloze' || question.questions.template === 'listen') {
          let children = question.children
          children.forEach(function(child, cIndex) {
            Object.assign(child, child.questions)
          })
          question.questions.children = children
        }
        question.questions.pad = question.pad || {}
        question.questions = Question.getParsedData(question.questions)
      })
      console.log('this.questionList=', that.questionList)
      return this.questionList
    }
    getQuestionList() {
      const that = this
      wepy.request({
        url: API.HOST_URI + API.getAnswerInfo,
        data: Object.assign({
          paperId: this.paperId,
          uid: this.user.id
        }, wepy.getStorageSync('xcx_yixueyilian_privacy')),
        success(res) {
          API.validateLogIn(res.data.status.code, function() {
            that.questionList = res.data.data[0].answerInfo
            that.parsedQuestionList = that.getParsedQuestionList()
            that.question = that.parsedQuestionList[0]
            const pad = that.getCurrentQuestions().pad
            that.jsonAudioComment = pad.jsonAudioComment || []
          }, function(code) {
            that.$invoke('toast', 'show', {
              title: res.data.status.desc
            })
          })
          that.$apply()
        }
      })
    }
    getCurrentQuestions(question = this.question) {
      console.log('question==', question)
      const questions = question.questions
      if (questions.template === 'multi' || questions.template === 'cloze' || questions.template === 'listen') {
        return questions.children[0]
      } else {
        return Object.assign(question, questions)
      }
    }
    mergePad(settings = {}) {
      const questions = this.question.questions
      if (questions.template === 'multi' || questions.template === 'cloze' || questions.template === 'listen') {
        const child = questions.children[0]
        this.question.questions.children[0] = Object.assign(child, {
          pad: Object.assign(child.pad, settings)
        })
      } else {
        this.question.questions.pad = Object.assign(questions.pad, settings)
      }
    }
    getQuestionById(id = this.unCheckedQuestionId) {
      const that = this
      return this.parsedQuestionList.find(function(question, index) {
        return that.getCurrentQuestions(question).id * 1 === id
      }) || this.parsedQuestionList[0]
    }
    getUserById(id = this.unCheckedUserId) {
      return this.userList.find((user) => user.id === id) || this.userList[0]
    }
  }
</script>
